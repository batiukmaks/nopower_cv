from telegram import InlineKeyboardMarkup, Update, Bot
from telegram.ext import (
    Updater,
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import constants
from general import get_newest_folder
from bot_management import get_gpv_nopower_ranges, get_group_gpv
from menu import (
    get_choose_gpv_group_menu,
    get_main_menu_chosen_group,
    get_main_menu
)
import config
import os
PORT = int(os.environ.get('PORT', 5000))


# Check version
from telegram import __version__ as TG_VER

try:
    from telegram import __version_info__
except ImportError:
    __version_info__ = (0, 0, 0, 0, 0)  # type: ignore[assignment]

if __version_info__ < (20, 0, 0, "alpha", 1):
    raise RuntimeError(
        f"This example is not compatible with your current PTB version {TG_VER}. To view the "
        f"{TG_VER} version of this example, "
        f"visit https://docs.python-telegram-bot.org/en/v{TG_VER}/examples.html"
    )


# Enable logging
import logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# Enable error handling
import html, traceback, json
from telegram.constants import ParseMode

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Log the error and send a telegram message to notify the developer."""
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

    tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
    tb_string = "".join(tb_list)

    update_str = update.to_dict() if isinstance(update, Update) else str(update)
    message = (
        f"An exception was raised while handling an update\n"
        f"<pre>update = {html.escape(json.dumps(update_str, indent=2, ensure_ascii=False))}"
        "</pre>\n\n"
        f"<pre>context.chat_data = {html.escape(str(context.chat_data))}</pre>\n\n"
        f"<pre>context.user_data = {html.escape(str(context.user_data))}</pre>\n\n"
        f"<pre>{html.escape(tb_string)}</pre>"
    )
    await context.bot.send_message(
        chat_id=config.DEVELOPER_CHAT_ID, text=message, parse_mode=ParseMode.HTML
    )


async def show_menu(update: Update, menu):
    await update.message.reply_text(
        text=menu["text"], reply_markup=InlineKeyboardMarkup(menu["menu"]), parse_mode=ParseMode.HTML, disable_web_page_preview=True
    )


async def send_welcome_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "\n".join(
            [
                "–ü—Ä–∏–≤—ñ—Ç üëã",
                "–†–∞–¥–∏–π, —â–æ —Ç–∏ –∑–∞—Ü—ñ–∫–∞–≤–∏–≤—Å—è —Ü–∏–º –±–æ—Ç–æ–º ü§ô",
                "–°–ø–æ–¥—ñ–≤–∞—é—Å—å, –≤—ñ–Ω —Ö–æ—á —Ç—Ä–æ—Ö–∏ –ø–æ–ª–µ–≥—à–∏—Ç—å —Ç–≤–æ—î –∂–∏—Ç—Ç—è ü´∂",
            ]
        ),
    )
    message_to_pin = await update.message.reply_text(
        "\n".join([
            f"\n\n\n‚ùóÔ∏è –ú–æ–∂–ª–∏–≤—ñ –Ω–µ–∑–Ω–∞—á–Ω—ñ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –≤—ñ–¥ –≥—Ä–∞—Ñ—ñ–∫—É.",
            f"‚ùóÔ∏è –í —Ä–∞–∑—ñ —Ä—ñ–∑–∫–æ–≥–æ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ –º–µ—Ä–µ–∂—ñ, –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–æ–±–æ–≤'—è–∑–∞–Ω–∏–π –Ω–∞ —Ü–µ –ø–æ–≤–ø–ª–∏–≤–∞—Ç–∏. –Ñ–¥–∏–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç -- –∞–≤–∞—Ä—ñ–π–Ω–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.",
            f"‚ùóÔ∏è –ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—è —Ç–∞–∫–æ–∂ —ñ –∑ —ñ–Ω—à–∏—Ö –ø—Ä–∏—á–∏–Ω, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ —á–µ—Ä–µ–∑ –∞–≤–∞—Ä—ñ–π–Ω—ñ –∞–±–æ –ø–ª–∞–Ω–æ–≤—ñ —Ä–æ–±–æ—Ç–∏ –≤ –º–µ—Ä–µ–∂–∞—Ö.",
        ]),
    )
    await message_to_pin.pin()
    await send_bot_info(update, context)


async def send_bot_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = "\n".join(
        [
            f"üò° –ß–µ—Ä–µ–∑ –¥—ñ—ó —Ä–æ—Å—ñ–π—Å—å–∫–∏—Ö –æ–∫—É–ø–∞–Ω—Ç—ñ–≤ –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü—ñ—ó –£–∫—Ä–∞—ó–Ω–∏",
            f"üóì –ß–µ—Ä–µ–∑ —Ü–µ –≤ –∫–æ–∂–Ω—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞–ø—Ä–æ–≤–∞–¥–∂—É—é—Ç—å –≥—Ä–∞—Ñ—ñ–∫–∏ –ø–æ–≥–æ–¥–∏–Ω–Ω–∏—Ö –≤—ñ–¥–∫–ª—é—á–µ–Ω—å (–ì–ü–í), –∑–≥—ñ–¥–Ω–æ –∑ —è–∫–∏–º–∏ –≤–º–∏–∫–∞—é—Ç—å/–≤–∏–º–∏–∫–∞—é—Ç—å —Å–≤—ñ—Ç–ª–æ",
            f"ü§Ø –í –ß–µ—Ä–Ω—ñ–≤—Ü—è—Ö —Ç–∞ –æ–±–ª–∞—Å—Ç—ñ –ì–ü–í –∑–º—ñ–Ω—é—î—Ç—å—Å—è —â–æ–¥–Ω—è. –î–µ–∫–æ–ª–∏ –≥—Ä–∞—Ñ—ñ–∫ –º–æ–∂–µ –æ–Ω–æ–≤–∏—Ç–∏—Å—å –Ω–∞–≤—ñ—Ç—å –ø–æ—Å–µ—Ä–µ–¥ –¥–Ω—è",
            f"ü§© –î–ª—è —Ç–æ–≥–æ, —â–æ–± –ø–æ–ª–µ–≥—à–∏—Ç–∏ –∂–∏—Ç—Ç—è —á–µ—Ä–Ω—ñ–≤—á–∞–Ω–∞–º, —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ü–µ–π –±–æ—Ç. –í –Ω—å–æ–º—É –≤–∏ –ª–µ–≥–∫–æ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó —Å–∞–º–µ –≤ –≤–∞—à—ñ–π –≥—Ä—É–ø—ñ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å",
            f"üòã –¢–µ–ø–µ—Ä –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ö–æ–¥–∏—Ç–∏ –Ω–∞ —Å–∞–π—Ç –ß–µ—Ä–Ω—ñ–≤—Ü—ñ–û–±–ª–ï–Ω–µ—Ä–≥–æ, —à—É–∫–∞—Ç–∏ —Å–≤–æ—é –≥—Ä—É–ø—É —Ç–∞ –∑–∞–ø–∞–º'—è—Ç–æ–≤—É–≤–∞—Ç–∏, –∫–æ–ª–∏ —Å–≤—ñ—Ç–ª–æ –≤–∏–º–∏–∫–∞—Ç–∏–º—É—Ç—å",
            f"üëå –¢–µ–ø–µ—Ä –≤—Å–µ –ª–µ–≥—à–µ: ",
            f"      üìç –ó–∞–π—à–æ–≤ –≤ —á–∞—Ç –∑ –±–æ—Ç–æ–º @nopower_cv_bot",
            f"      üìç –ó–∞–ø—Ä–æ—Å–∏–≤ –ì–ü–í –¥–ª—è —Å–≤–æ—î—ó –≥—Ä—É–ø–∏ (/my_group) –∞–±–æ –æ–±—Ä–∞–≤ —ñ–Ω—à—É –≥—Ä—É–ø—É (/choose_group)",
            f"      üìç –ë–∞—á–∏—à –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –≥—Ä—É–ø–∏ ‚úÖ",
            f"\n\nü§ü –ë–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏–π –ë–∞—Ç—é–∫–æ–º –ú–∞–∫—Å–∏–º–æ–º ü§ü",
            f"üá∫üá¶ –°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ üá∫üá¶",
        ]
    )
    await update.message.reply_text(text)
    await show_menu(update, get_main_menu(context))


async def help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = "\n".join(
        [
            f"üí† –î–æ–∑–≤–æ–ª–µ–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ üí†",
            "",
            f"/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞",
            f"/choose_group - –û–±—Ä–∞—Ç–∏ –≥—Ä—É–ø—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å",
            f"/my_group - –ü–æ–∫–∞–∑–∞—Ç–∏ –ì–ü–í –¥–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤–∏–±—Ä–∞–Ω–æ—ó –≥—Ä—É–ø–∏",
            f"/info - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞",
            f"/report - –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É",
            f"/help - –¶–µ –º–µ–Ω—é",
        ]
    )
    await update.message.reply_text(text)


async def choose_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_menu(update, get_choose_gpv_group_menu())


async def send_my_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await send_gpv_group_info(update, context.user_data["gpv_group"])
        await show_menu(update, get_main_menu_chosen_group())
    except KeyError:
        await choose_group(update, context)


async def send_gpv_group_info(update: Update, group: int):
    nopower = get_gpv_nopower_ranges(get_group_gpv(group))
    text = "\n".join(
        [
            f"üí° –í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä—É–ø—É ‚Ññ{group}",
            "üïë –ó–≥—ñ–¥–Ω–æ –∑ <a href='https://oblenergo.cv.ua/shutdowns/'>–≥—Ä–∞—Ñ—ñ–∫–æ–º</a>, —Å—å–æ–≥–æ–¥–Ω—ñ —É –≤–∞—Å –Ω–µ –±—É–¥–µ —Å–≤—ñ—Ç–ª–∞ –≤ —Ç–∞–∫—ñ –≥–æ–¥–∏–Ω–∏:\n",
        ]
        + [f"üìç {start:02}:00 - {end:02}:00" for start, end in nopower]
    )
    if os.path.exists(get_newest_folder(constants.website_url) + "/using_previous.txt"):
        text += "\n\n‚ùóÔ∏è –ë–æ—Ç –Ω–µ –∑–º—ñ–≥ –≤—ñ–¥—Å–∫–∞–Ω—É–≤–∞—Ç–∏ —Ñ–æ—Ç–æ, —Ç–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–∞–Ω—ñ. –ó–≥–æ–¥–æ–º –≤—Å–µ –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏, –¥—è–∫—É—é –∑–∞ –¥–æ–≤—ñ—Ä—É ‚ù§Ô∏è"
        message = await update.get_bot().send_photo(
            chat_id=config.DEVELOPER_CHAT_ID,
            photo=open(
                get_newest_folder(constants.website_url) + "/unable_to_process/detected_table_image.jpg"
            ),
        )
        await message.pin()
    await update.message.reply_photo(
        open(
            get_newest_folder(constants.website_url) + "/" + constants.local_image, "rb"
        ),
        caption=text,
        parse_mode=ParseMode.HTML
    )


async def report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if "is_report_active" not in context.user_data:
        context.user_data["is_report_active"] = False

    if not context.user_data["is_report_active"]:
        context.user_data["is_report_active"] = True
        text = '\n'.join([
            f'‚úèÔ∏è –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.',
            f'üì∑ –Ø–∫—â–æ —Ç—Ä–µ–±–∞, –ø—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å –æ–¥–Ω–µ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –ø—Ä–æ–±–ª–µ–º–∏.',
            f'‚ùóÔ∏è –í—Å–µ –º–∞—î –±—É—Ç–∏ –æ–ø–∏—Å–∞–Ω–æ –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.',
        ])
        await update.message.reply_text(text)
    else:
        context.user_data["is_report_active"] = False
        report_received = '\n'.join([
            f'chat_id: {update.message.chat_id}',
            f'Username: @{update.message.chat.username}',
            f'Name: {update.message.chat.full_name}',
        ])
        thank = '\n'.join([
            f'üôè –î—è–∫—É—é –∑–∞ –¥–æ–ø–æ–º–æ–≥—É!',
            f'‚öôÔ∏è –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!',
        ])
        await send_message_to_admin(context.bot, report_received)
        await update.message.forward(chat_id=config.ADMIN_CHAT_ID)
        await update.message.reply_text(thank)
        await show_menu(update, get_main_menu(context))


async def send_message_to_admin(bot: Bot, text):
    await bot.send_message(chat_id=config.ADMIN_CHAT_ID, text=text)


async def not_commands_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if "is_report_active" in context.user_data and context.user_data["is_report_active"]:
        await report(update, context)
    elif not update.message.pinned_message:
        await update.message.reply_text("üÜò –î–ª—è –¥–æ–ø–æ–º–æ–≥–∏ –≤–≤–µ–¥—ñ—Ç—å /help")
        


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query

    if query.data == "/choose_group":
        await choose_group(query, context)
    elif query.data == "/my_group":
        await send_my_group(query, context)
    elif query.data.startswith("gpv_group_choice_"):
        context.user_data["gpv_group"] = int(query.data[query.data.rindex("_") + 1 :])
        await send_gpv_group_info(query, context.user_data["gpv_group"])
    elif query.data == "/help":
        await help(query, context)
    elif query.data == "/info":
        await send_bot_info(query, context)
    elif query.data == "/report":
        await report(query, context)
    await query.delete_message()

    if query.data in [
        "/start",
        "to_main",
        "/help",
    ] or query.data.startswith("gpv_group_choice_"):
        await show_menu(query, get_main_menu(context))


def main() -> None:
    application = Application.builder().token(config.BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", send_welcome_message))
    application.add_handler(CommandHandler("my_group", send_my_group))
    application.add_handler(CommandHandler("choose_group", choose_group))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("info", send_bot_info))
    application.add_handler(CommandHandler("report", report))
    application.add_handler(CallbackQueryHandler(callback_handler))
    application.add_handler(
        MessageHandler(~filters.COMMAND, not_commands_handler)
    )
    application.add_error_handler(error_handler)

    application.run_polling()

    application.run_webhook(
        listen="0.0.0.0",
        port=int(PORT),
        url_path=config.BOT_TOKEN,
        webhook_url=config.WEBHOOK_URL + config.BOT_TOKEN
    )


if __name__ == "__main__":
    main()
